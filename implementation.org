* Notes on Implementation Decisions

** Indexing

Buffer exposes Array of lines, which is 0-indexed
Viewport is 0-indexed

** Conventions

Element variables are prefixed with $

** Character support

Currently, the implementation assumes characters '1ch' wide in monospace font.
This assumptions breaks for 2ch wide kanji.
Emojis are 2ch wide on the terminal but do not take a full 2ch in the DOM. Making it 2chs
would require wrapping it is a container.

** Accessibility

Editor captures the tab keypresses. This will be an issue for accessbility as
users can't tab out to the next element in the DOM.

** Compatibility

Currently tested and developed around Mac OS keys, namely Meta key. Should not be diffcult
to support Windows.

** Clipboard

Paste and copy is not handled through keydown event, as doing so would require calling the
clipboard API access which requires additional security permissions.

*** Paste

Simply handling a paste event is sufficient.

*** Copy

A dummy textarea was needed as bridge.

** Extensions

Are to be provided by the client

- Treesitter
- iOS support by proxing to Keyboard evnets

** Word

Text editors have a notion of a word and the ability to move forward and back a word.
It is necessary to define what a word is. This implementation defines a word as a sequence of:

- alphanumeric
- underscore

Everything else delimits a word. Additionally, every other character is its own word as far
as movement goes. One exception is the space character where a continuous sequence is one
entire word. Tabs are treated as every other character rather than a single white space.
Intellij's behavior is a sequence of the same symbol characters is one word, e.g. "===".

Other flavors include:
- Vim has W (versus regular w) mode which treats words as any non-whitespace sequence.
    - This is called WORD-mode instead of word-mode
- Editors can be configured to break words at the capital letter on camelCasing



